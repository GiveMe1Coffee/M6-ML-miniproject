my_legend <- c("no cancer","cancer")
legend(-3,3, my_legend, pch=19,col=c(1,2))
#################### UMAP
data.umap <- umap(data[1:19], random_state = 0)
plot(data.umap$layout, pch=19, col=data$ca_cervix)
my_legend <- c("no cancer","cancer")
legend(1,3, my_legend, pch=19,col=c(1,2))
#################### UMAP
data.umap <- umap(data[1:19], random_state = 0)
plot(data.umap$layout, pch=19, col=data$ca_cervix)
my_legend <- c("no cancer","cancer")
legend(1,3, my_legend, pch=19,col=c(1,2))
legend <- c("no cancer","cancer")
legend(1,3, legend, pch=19,col=c(1,2))
plot(data.umap$layout, pch=19, col=data$ca_cervix)
legend <- c("no cancer","cancer")
legend(1,3, legend, pch=19,col=c(1,2))
#################### UMAP
data.umap <- umap(data[1:19], random_state = 0)
plot(data.umap$layout, pch=19, col=data$ca_cervix)
l <- c("no cancer","cancer")
legend(1,3, l, pch=19,col=c(1,2))
library(randomForestSRC)
install.packages('randomForestSRC')
library(randomForestSRC)
library(randomForestSRC)
install.packages('DiagrammeR')
library(randomForestSRC)
library(DiagrammeR)
library(randomForest)
library(randomForestSRC)
library(ggRandomForest)
install.packages('ggRandomForests')
library(ggRandomForests)
library(randomForestSRC)
install.packages('randomForestSRC')
library(randomForestSRC)
library(rpart)
set.seed(123)
sel <- sample.int(19, n/4)
n <- len(data)
n <- nrows(data)
n <- nrow(data)
sel <- sample.int(19, n/4)
sel <- sort(sample.int(19, n/4))
sel <- sort(sample.int(72, n/4))
sel <- sort(sample.int(72, n/4))
data.train <- data[-sel,]
data.test <- data[sel,]
h1 <- rpart(ca_cervix ~ . , data = data.train, method ='class', cp=0, xval=500)
print(h1)
install.packages('rattle')
library(rattle)
library(rattle)
fancyRpartPlot(h1, caption = NULL, type = 2)
fancyRpartPlot(h1, caption = NULL, type = 1)
fancyRpartPlot(h1, caption = NULL, type = 2)
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
dim(data)
head(data)
View(data)
#################### UMAP
table(data$NObeyesdad)
data$NObeyesdad <- as.factor(data$NObeyesdad)
#################### UMAP
table(data$NObeyesdad)
data.umap <- umap(data[1:16], random_state = 0)
#install.packages('rattle')
library(psych)
library(rattle)
library(rpart)
library(stats)
library(umap)
set.seed(123)
set.seed(123)
```{r data import}
setwd('/Users/larissageiser/Documents/GitHub/M6-ML-miniproject')
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
dim(data)
head(data)
pairs.panels(data[1:10],
ellipses = F,
pch= 21,
bg = data$ca_cervix)
dataKmeans <- data.frame(data$Weight, data$family_history_with_overweight, data$NObeyesdad) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 2) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
table(data$NObeyesdad)
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
dataKmeans <- data.frame(data$Weight, data$family_history_with_overweight, data$NObeyesdad) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
dataKmeans <- data.frame(data$Weight, data$family_history_with_overweight, data$NObeyesdad) #selecting "best" segregating variables
View(dataKmeans)
dataKmeans <- data.frame(data$Weight, data$Height, data$NObeyesdad) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
# clutering plot of the results
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(3, 14,
c("1","2"),
pch=19,
col=c(1,2))
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(3, 14,
c("1","2"),
pch=19,
col=c(1,2))
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(140, 1.6,
c("1","2"),
pch=19,
col=c(1,2))
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(140, 1.6,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(170, 1.7,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
data$NObeyesdad <- as.factor(data$NObeyesdad)
data.umap <- umap(data[1:16], random_state = 0)
# gender : 0 = female, 1 = male
data[which(data$Gender == 'Female')] <- 0
data[which(data$Gender == 'Male')] <- 1
# gender : 0 = female, 1 = male
data[which(data$Gender == 'Female')] <- '0'
data[which(data$Gender == 'Male')] <- '1'
data[which(data$Gender == 'Female')] <- '0'
# gender : 0 = female, 1 = male
table(data$Gender)
data[which(data$Gender == 'Female')] <- '0'
# gender : 0 = female, 1 = male
data$Gender <- as.character(data$Gender)
data[which(data$Gender == 'Female')] <- '0'
data[which(data$Gender == 'Male')] <- '1'
# gender : 0 = female, 1 = male
transform(data, Gender = factor(Gener,
levels = c("Female", "Male"),
labels = c(0,1)))
# gender : 0 = female, 1 = male
transform(data, Gender = factor(Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# family history with overweight
transform(data, family_history_with_overweight = factor(family_history_with_overweight,
levels = c("no", "yes"),
labels = c(0,1)))
# FAVC (frequency of highly caloric food)
table(data$FAVC)
# FAVC (frequency of highly caloric food)
transform(data, FAVC = factor(FAVC,
levels = c("no", "yes"),
labels = c(0,1)))
colnames(data[6]) <- 'high_calory_food'
colnames(data[FAVC]) <- 'high_calory_food'
colnames(data['FAVC']) <- 'high_calory_food'
names(data)[names(data) == 'FAVC'] <- 'high_calory_food_freq'
# FCVC (frequency of vegetable in diet)
names(data)[names(data) == 'FCVC'] <- 'vegetable_in_meals'
# FAVC (frequency of highly caloric food)
transform(data, FAVC = factor(FAVC,
levels = c("no", "yes"),
labels = c(0,1)))
# FAVC (frequency of highly caloric food)
transform(data, high_calory_food_freq = factor(high_calory_food_freq,
levels = c("no", "yes"),
labels = c(0,1)))
# family history with overweight
transform(data, family_history_with_overweight = factor(family_history_with_overweight,
levels = c("no", "yes"),
labels = c(0,1)))
#################### DATA HARMONIZATION
# gender : 0 = female, 1 = male
transform(data, Gender = factor(Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# family history with overweight
transform(data, family_history_with_overweight = factor(family_history_with_overweight,
levels = c("no", "yes"),
labels = c(0,1)))
# FAVC (frequency of highly caloric food)
transform(data, FAVC = factor(FAVC,
levels = c("no", "yes"),
labels = c(0,1)))
# gender : 0 = female, 1 = male
transform(data, Gender = factor(Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# family history with overweight
transform(data, family_history_with_overweight = factor(family_history_with_overweight,
levels = c("no", "yes"),
labels = c(0,1)))
#install.packages('rattle')
library(psych)
library(rattle)
library(rpart)
library(stats)
library(umap)
set.seed(123)
set.seed(123)
```{r data import}
setwd('/Users/larissageiser/Documents/GitHub/M6-ML-miniproject')
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
dim(data)
head(data)
# gender : 0 = female, 1 = male
transform(data, Gender = factor(Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# gender : 0 = female, 1 = male
data$Gender <- transform(data, Gender = factor(Gender,
levels = c("Female", "Male"),
labels = c(0,1)))
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
# gender : 0 = female, 1 = male
data$Gender[data$Gender == 'Male'] <- 1
# gender : 0 = female, 1 = male
data$Gender[data$Gender == 'Female'] <- 0
data$Gender[data$Gender == 'Male'] <- 1
# family history with overweight
data$family_history_with_overweight[data$family_history_with_overweight == 'no'] <- 0
data$family_history_with_overweight[data$family_history_with_overweight == 'yes'] <- 1
# gender : 0 = female, 1 = male
data$Gender[data$Gender == 'Female'] <- 0
data$Gender[data$Gender == 'Male'] <- 1
data$Gender <- as.numeric(data$Gender)
# family history with overweight
data$family_history_with_overweight[data$family_history_with_overweight == 'no'] <- 0
data$family_history_with_overweight[data$family_history_with_overweight == 'yes'] <- 1
data$family_history_with_overweight <- as.numeric(data$family_history_with_overweight)
# FAVC (frequency of highly caloric food)
data$FAVC[data$FAVC == 'no'] <- 0
data$FAVC[data$FAVC == 'yes'] <- 1
data$FAVC <- as.numeric(data$FAVC)
names(data)[names(data) == 'FAVC'] <- 'high_calory_food_freq'
# FCVC (frequency of vegetable in diet)
names(data)[names(data) == 'FCVC'] <- 'vegetable_in_meals'
# NCP (number of main meals in a day)
names(data)[names(data) == 'NCP'] <- 'nb_main_meals'
# CAEC (food between meals ?)
table(data$CAEC)
# CAEC (food between meals ?)
data$CAEC[data$CAEC == 'no'] <- 0
data$CAEC[data$CAEC == 'Sometimes'] <- 1
data$CAEC[data$CAEC == 'Frequently'] <- 2
data$CAEC[data$CAEC == 'Always'] <- 3
data$CAEC <- as.numeric(data$CAEC)
names(data)[names(data) == 'CAEC'] <- 'snacking'
# smoke
data$SMOKE[data$SMOKE == 'no'] <- 0
data$SMOKE[data$SMOKE == 'yes'] <- 1
data$SMOKE <- as.numeric(data$SMOKE)
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
#################### DATA HARMONIZATION
# gender : 0 = female, 1 = male
data$Gender[data$Gender == 'Female'] <- 0
data$Gender[data$Gender == 'Male'] <- 1
data$Gender <- as.numeric(data$Gender)
# family history with overweight
data$family_history_with_overweight[data$family_history_with_overweight == 'no'] <- 0
data$family_history_with_overweight[data$family_history_with_overweight == 'yes'] <- 1
data$family_history_with_overweight <- as.numeric(data$family_history_with_overweight)
# FAVC (frequency of highly caloric food)
data$FAVC[data$FAVC == 'no'] <- 0
data$FAVC[data$FAVC == 'yes'] <- 1
data$FAVC <- as.numeric(data$FAVC)
# CAEC (food between meals ?)
data$CAEC[data$CAEC == 'no'] <- 0
data$CAEC[data$CAEC == 'Sometimes'] <- 1
data$CAEC[data$CAEC == 'Frequently'] <- 2
data$CAEC[data$CAEC == 'Always'] <- 3
data$CAEC <- as.numeric(data$CAEC)
# smoke
data$SMOKE[data$SMOKE == 'no'] <- 0
data$SMOKE[data$SMOKE == 'yes'] <- 1
data$SMOKE <- as.numeric(data$SMOKE)
# SCC (do you monitor your calories ?)
table(data$scc)
# SCC (do you monitor your calories ?)
table(data$SCC)
# SCC (do you monitor your calories ?)
data$SCC[data$SCC == 'no'] <- 0
data$SCC[data$SCC == 'yes'] <- 1
data$SCC <- as.numeric(data$SMOKE)
# CALC (alcohol consumption)
data$CALC[data$CALC == 'no'] <- 0
data$CALC[data$CALC == 'Sometimes'] <- 1
data$CALC[data$CALC == 'Frequently'] <- 2
data$CALC[data$CALC == 'Always'] <- 3
data$CALC <- as.numeric(data$CALC)
# MTRANS (mode of transportation)
data$MTRANS <- as.factor(data$MTRANS)
# NObeyesdad (obesity)
data$NObeyesdad <- as.factor(data$NObeyesdad)
colnames(data$NObeyesdad) <- 'Obesity'
# NObeyesdad (obesity)
data$NObeyesdad <- as.factor(data$NObeyesdad)
colnames(data)[colnames(data) == 'NObeyesdad'] <- 'Obesity'
pairs.panels(data[1:16],
ellipses = F,
pch= 21,
bg = data$Obesity)
dataKmeans <- data.frame(data$Weight, data$Height, data$Obesity) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
# clutering plot of the results
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
dataKmeans <- data.frame(data$Weight, data$family_history_with_overweight, data$Obesity) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
# clutering plot of the results
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
dataKmeans <- data.frame(data$Weight, data$Height, data$Obesity) #selecting "best" segregating variables
kmclust <- kmeans(dataKmeans[,1:2], 7) # 2 diagnoses = 2 clusters (could be guessed with sum of squares)
plot(dataKmeans[1:2],
col=kmclust$cluster,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
# confusion matrix
table(label=data$ca_cervix,cluster=kmclust$cluster)
# confusion matrix
table(label=data$Obesity,cluster=kmclust$cluster)
data$Obesity <- as.factor(data$Obesity)
data.umap <- umap(data[1:16], random_state = 0)
data.umap <- umap(data[1:15], random_state = 0)
#################### UMAP
table(daata$Obesity)
#################### UMAP
table(data$Obesity)
data.umap <- umap(data[1:15], random_state = 0)
plot(data.umap$layout, pch=19, col=data$Obesity)
l <- c("Insufficient_Weight","Normal_Weight", "Obesity_Type_I", "Obesity_Type_II", "Obesity_Type_III", "Overweight_Level_I", "Overweight_Level_II")
legend(1,3, l, pch=19,col=c(1:7))
plot(data.umap$layout, pch=19, col=data$Obesity)
n <- nrow(data)
sel <- sort(sample.int(n, n/4))
data.train <- data[-sel,]
data.test <- data[sel,]
h1 <- rpart(Obesity ~ . , data = data.train, method ='class', cp=0, xval=500)
fancyRpartPlot(h1, caption = NULL, type = 2)
fancyRpartPlot(h1, caption = NULL, type = 1)
#################### LIBRARY
#install.packages('rattle')
library(dplyr)
library(ggplot2)
library(psych)
library(rattle)
library(rpart)
library(stats)
library(tidyr)
library(umap)
set.seed(123)
#################### LIBRARY
#install.packages('rattle')
library(dplyr)
library(ggplot2)
library(psych)
library(rattle)
library(rpart)
library(stats)
library(tidyr)
library(umap)
set.seed(123)
#################### DATA IMPORTING AND DESCRIPTION for Larissa
setwd('/Users/larissageiser/Documents/GitHub/M6-ML-miniproject')
# Lari : '/Users/larissageiser/Documents/GitHub/M6-ML-miniproject'
data <- read.csv('ObesityDataSet_raw_and_data_sinthetic.csv')
dim(data)
sum(is.na(data))
head(data)
#################### DATA HARMONIZATION
# gender : 0 = female, 1 = male
data$Gender[data$Gender == 'Female'] <- 0
data$Gender[data$Gender == 'Male'] <- 1
data$Gender <- as.numeric(data$Gender)
# family history with overweight
data$family_history_with_overweight[data$family_history_with_overweight == 'no'] <- 0
data$family_history_with_overweight[data$family_history_with_overweight == 'yes'] <- 1
data$family_history_with_overweight <- as.numeric(data$family_history_with_overweight)
# FAVC (frequency of highly caloric food)
data$FAVC[data$FAVC == 'no'] <- 0
data$FAVC[data$FAVC == 'yes'] <- 1
data$FAVC <- as.numeric(data$FAVC)
# CAEC (snacking between meals)
data$CAEC[data$CAEC == 'no'] <- 0
data$CAEC[data$CAEC == 'Sometimes'] <- 1
data$CAEC[data$CAEC == 'Frequently'] <- 2
data$CAEC[data$CAEC == 'Always'] <- 3
data$CAEC <- as.numeric(data$CAEC)
# smoke
data$SMOKE[data$SMOKE == 'no'] <- 0
data$SMOKE[data$SMOKE == 'yes'] <- 1
data$SMOKE <- as.numeric(data$SMOKE)
# SCC (calories monitoring)
data$SCC[data$SCC == 'no'] <- 0
data$SCC[data$SCC == 'yes'] <- 1
data$SCC <- as.numeric(data$SMOKE)
# CALC (alcohol consumption)
data$CALC[data$CALC == 'no'] <- 0
data$CALC[data$CALC == 'Sometimes'] <- 1
data$CALC[data$CALC == 'Frequently'] <- 2
data$CALC[data$CALC == 'Always'] <- 3
data$CALC <- as.numeric(data$CALC)
# MTRANS (mode of transportation)
data$MTRANS <- as.factor(data$MTRANS) # better to encode with numbers ? i don't think so
# NObeyesdad (obesity)
data$NObeyesdad <- as.factor(data$NObeyesdad)
colnames(data)[colnames(data) == 'NObeyesdad'] <- 'Obesity'
# results
head(data)
pairs.panels(data[1:16],
ellipses = F,
pch= 21,
bg = data$Obesity)
datakmeans <- data.frame(data$Weight, data$Height, data$Obesity)
# call kmeans again but this time passing the centers calculated in the previous step
km <- kmeans(datakmeans[,1:2], 7)
# plot of the results
plot(datakmeans[1:2],
col=km$cluster,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
#################### K-MEANS ALGORITHM
datakmeans <- data.frame(data$Weight, data$Height, data$Obesity)
# call kmeans again but this time passing the centers calculated in the previous step
km <- kmeans(datakmeans[,1:2], 7)
# plot of the results
plot(datakmeans[1:2],
col=km$cluster,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
#################### K-MEANS CLUSTER ORDERING
# re-order kmeans clusters according to mean weight
ordered_center <- order(km$centers[,1])
ordered_labels <- match(km$cluster,ordered_center)
# plot of the results
plot(datakmeans[1:2],
col=ordered_labels,
pch=19)
legend(165, 1.8,
c("1","2", "3", "4", "5", "6", "7"),
pch=19,
col=c(1:7))
#################### K-MEANS CONFUSION MATRIX
cm <- table(label=data$Obesity, cluster=ordered_labels)
#################### K-MEANS CONFUSION MATRIX
cm <- table(label=data$Obesity, cluster=ordered_labels)
cm ; cat( sum(diag(cm)) / sum(cm) )
#################### TRAIN AND TEST SETS
n <- nrow(data)
sel <- sort(sample.int(n, n/4))
data.train <- data[-sel,]
data.test <- data[sel,]
#################### TRAIN AND TEST SETS
n <- nrow(data)
sel <- sort(sample.int(n, n/4))
data.train <- data[-sel,]
data.test <- data[sel,]
#################### DECISION TREE ALGORITHM
h <- rpart(Obesity ~ . , data = data.train, method ='class', cp=0, xval=500)
fancyRpartPlot(h, caption = NULL, type = 1)
#################### DECISION TREE PRUNING
plotcp(h)
h_pruned <- prune(h, cp=0.03)
fancyRpartPlot(h_pruned, caption=NULL, type=2)
#################### DECISION TREE EVALUATION
obesity_pred <- predict(h_pruned, data.test, type= 'class')
conf_table <- table(true=data.test$Obesity, predicted = obesity_pred)
n <- sum(conf_table)
error = (n - sum(diag(conf_table)))/n
cat(sprintf("The relative prediction error is %4.1f%%",error*100))
